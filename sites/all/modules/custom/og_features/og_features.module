<?php

define('OG_FEATURES_FIELD', 'og_features_selection');

/**
 * Implements hook_og_fields_info().
 */
function og_features_og_fields_info() {
  $items = array();
  $items[OG_FEATURES_FIELD] = array(
    'type' => array('group'),
    'description' => t('Group Features selection'),
    'field' => array(
      'field_name' => OG_FEATURES_FIELD,
      'no_ui' => TRUE,
      'type' => 'list_text',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(),
        'allowed_values_function' => 'og_features_allowed_values',
      ),
    ),
    'instance' => array(
      'label' => t('Group Features'),
      'widget' => array(
        'type' => 'options_buttons',
        'settings' => array(),
      ),
      'required' => FALSE,
      'default_value' => array(),
      'displays' => array(),
    ),
  );
  return $items;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Alters the group_audience field, disabling or hiding it when asked.
 */
function og_features_field_widget_form_alter(&$element, &$form_state, $context) {
  $field = $context['field'];
  $instance = $context['instance'];
  if ($field['field_name'] == 'group_audience') {
    //$element['#access'] = FALSE;
    if ($group = og_context()) {

    }
  }
}

/**
 * Implements hook_field_info_alter().
 */
function og_features_field_info_alter($fields) {
  $fields['group']['instance_settings']['force_group_context'] = FALSE;
}


/**
 * Calls hook to define all the enabled/disabled group features.
 */
function og_features_get_features($type = "") {
  $types = &drupal_static(__FUNCTION__, array());
  if (empty($types)) {
    foreach (module_implements('og_features_registry') as $module) {
      $function = $module . '_og_features_registry';
      $module_types = $function();
      foreach ($module_types as $name => $info) {
        $types[$name] = $info;
      }
    }
  }
  if ($type != "") {
    return isset($types[$type]) ? $types[$type] : null;
  }
  return $types;
}

function og_features_allowed_values($field, $instance, $entity_type, $entity, $cacheable) {
  return og_features_select_list();
}

/**
 * Rest og_features_get_features().
 */
function og_features_reset_get_features() {
  drupal_static_reset('og_features_get_features');
}

/**
 * Group get enabled features
 */
function og_features_group($group) {
  $return = array();
  if (!is_object(($group))) return $return;
  $group_metadata = entity_metadata_wrapper('group', $group);
  if (!is_object($group_metadata)) return $return;

  $values = field_get_items($group_metadata->entity_type->value(), $group_metadata->entity->value(), OG_FEATURES_FIELD);
  if (!empty($values)) {
    foreach ($values as $val) {
      $return[] = $val['value'];
    }
  }
  return $return;
}

/**
 * See if a feature is enabled for a group
 */
function og_features_is_enabled($group, $feature) {
  $values = og_features_group($group);
  return in_array($feature, $values);
}

/**
 * hook_menu() access callback for og_features_pages.
 *
 * Checks to make sure that node is also group. If node is not a group we return false.
 * @param type $node
 * @param type $feature
 * @return boolean
 */
function og_features_access($node, $feature) {
  // Make sure that the feature is enabled
  if (!og_features_is_enabled('node', $node, $feature)) {
    return FALSE;
  }
  // Make sure the node is also a group
  if (!og_get_group('node', $node->nid)) {
    return FALSE;
  }
  return node_access('view', $node);
}

function og_features_node_access($node, $op, $account) {
  // This is broken
  return NODE_ACCESS_IGNORE;
  $allow_deny = NODE_ACCESS_IGNORE;
  if (!is_object($node)) return $allow_deny;
  $features = og_features_get_feature_for_entity_type('node', $node->type);
  if (!empty($features)) {
    $allow_deny = NODE_ACCESS_DENY;
    foreach ($features as $feature) {
      if (og_features_is_enabled('node', $node, $feature)) {
        $allow_deny = NODE_ACCESS_IGNORE;
        break;
      }
    }
  }
  return $allow_deny;

}

/**
 *
 * @param type $entity_type
 * @param type $bundle
 * @return array
 */
function og_features_get_feature_for_entity_type($entity_type, $bundle) {
  $features = og_features_get_features();
  $return = array();
  foreach ($features as $feature => $info) {
    foreach ($info['entity'] as $entity => $bundles) {
      foreach ($bundles as $bun) {
        if ($entity == $entity_type && $bun == $bundle) {
          $return[] = $feature;
        }
      }
    }
  }
  return $return;
}

function og_features_select_list() {
  $types = og_features_get_features();
  $return = array();
  foreach ($types as $key => $type) {
    $return[$key] = $type['title'];
  }
  return $return;
}

/**
 * Implements hook_views_api().
 */
function og_features_views_api() {
  return array(
    'api' => 3,
  );
}